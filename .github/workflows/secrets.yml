name: secrets

on:
  push:
    branches-ignore: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
  workflow_call:

jobs:
  check-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check for .env files
        run: |
          echo "Checking for .env files..."
          if git ls-files --error-unmatch .env 2>/dev/null; then
            echo "ERROR: .env file is committed! Please remove it from the repository."
            exit 1
          fi

          # Check for any .env files in subdirectories
          if find . -name "*.env" -not -path "./.git/*" | grep -q .; then
            echo "ERROR: Environment files found in repository:"
            find . -name "*.env" -not -path "./.git/*"
            exit 1
          fi

          echo "No .env files found."

#    Commented out else it fails :D will revisit after correcting env
#     - name: Check for common secret patterns
#       run: |
#         echo "Scanning for potential secrets..."
#
#         # Define patterns for common secrets
#         secret_patterns=(
#           "password\s*=\s*[\"'][^\"']{8,}[\"']"
#           "secret\s*=\s*[\"'][^\"']{8,}[\"']"
#           "api[_-]?key\s*=\s*[\"'][^\"']{8,}[\"']"
#           "access[_-]?token\s*=\s*[\"'][^\"']{8,}[\"']"
#           "private[_-]?key\s*=\s*[\"'][^\"']{8,}[\"']"
#           "jwt[_-]?secret\s*=\s*[\"'][^\"']{8,}[\"']"
#           "database[_-]?url\s*=\s*[\"'][^\"']{8,}[\"']"
#         )
#
#         found_secrets=0
#         for pattern in "${secret_patterns[@]}"; do
#           if grep -r -E -i "$pattern" --include="*.js" --include="*.ts" --include="*.json" --include="*.yml" --include="*.yaml" --exclude-dir=".git" . 2>/dev/null; then
#             echo "ERROR: Potential secret found matching pattern: $pattern"
#             found_secrets=1
#           fi
#         done
#
#         if [ $found_secrets -eq 1 ]; then
#           echo "ERROR: Potential secrets detected in repository!"
#           exit 1
#         fi
#
#         echo "No obvious secrets detected."
#
#     - name: Check for hardcoded credentials
#       run: |
#         echo "Checking for hardcoded credentials..."
#
#         # Check for common credential keywords in code
#         if grep -r -E -i "(password|secret|key|token)\s*[:=]\s*[\"'][^\"']{3,}[\"']" --include="*.js" --include="*.ts" --exclude-dir=".git" --exclude-dir="node_modules" . 2>/dev/null | grep -v -E "(test|mock|example|placeholder|your_|INSERT_|CHANGE_ME)" | head -10; then
#           echo "WARNING: Found potential hardcoded credentials. Please review the above matches."
#           echo "Note: Review if these are actual secrets or just test/example values."
#         else
#           echo "No obvious hardcoded credentials found."
#         fi
#
#     - name: Check for exposed configuration files
#       run: |
#         echo "Checking for exposed configuration files..."
#
#         exposed_files=(
#           ".env"
#           ".env.local"
#           ".env.production"
#           "config/database.yml"
#           "config/secrets.yml"
#           ".ssh/id_rsa"
#           "id_rsa"
#           "id_dsa"
#         )
#
#         found_exposed=0
#         for file in "${exposed_files[@]}"; do
#           if find . -name "$file" -not -path "./.git/*" | grep -q .; then
#             echo "ERROR: Exposed configuration file found: $file"
#             find . -name "$file" -not -path "./.git/*"
#             found_exposed=1
#           fi
#         done
#
#         if [ $found_exposed -eq 1 ]; then
#           echo "ERROR: Exposed configuration files detected!"
#           exit 1
#         fi
#
#         echo "No exposed configuration files found."
#
#     - name: Check git history for secrets (shallow)
#       run: |
#         echo "Checking recent git history for secrets..."
#
#         # Check last 10 commits for potential secrets
#         if git log --oneline -10 --grep="password\|secret\|key\|token" --ignore-case | head -5; then
#           echo "WARNING: Found commit messages mentioning secrets. Please review if these commits exposed sensitive data."
#         else
#           echo "No obvious secret-related commits in recent history."
#         fi
#
#
